---
title: "Tableau URL actions"
subtitle: "Tightening feedback loops and deep linking<br/><https://bvancil.github.io/tableau-url-actions/><br/>(Press ‚Üí key for next slide or ? key for help.)"
date: "2023-10-17"
date-format: iso
author: "Brian Vancil"
format:
  revealjs: 
    slide-number: true
    chalkboard: false
    preview-links: auto
    logo: images/AIRE_80.png
    theme: kubrand.scss
    embed-resources: true
---

## learning goals

1.  the difference between automating and informating
2.  *how* to create a URL action in Tableau
3.  *when* to create a URL action in Tableau by looking at 3 case studies
    a.  üîÅ Pre-populating fields on a dashboard feedback form with [Google Forms]{.underline}
    b.  üå°Ô∏è Identifying bad data using data quality dashboards with [Qualtrics]{.underline}
    c.  üîç Linking back to a source system with [Slate]{.underline}

::: notes
I want to thank my organization, Analytics, Institutional Research, & Effectiveness at the University of Kansas for the resources to explore these ideas. Anything I say or do poorly is entirely my fault.

Assuming you already know the basics of Tableau, you will learn...

Since URL actions are one of the oldest two types of actions, from a Tableau perspective, this is a beginner-level skill. I think you will get the most out of this time if you treat it as practice thinking about how you want to create dashboards. Not everything will be pertinent to everyone, but I will move quickly through those details, leave you enough information to reconstruct them on your own, and focus on creating a discussion of ways to improve the user experience.
:::

## philosophy of helpfulness

![](images/imgflip_bear.jpg){fig-alt="Bear lying down with the text, our users aren't lazy; they deserve the best user experience."}

::: notes
We are productivity multipliers for our organizations. If 10 users use your visualization per day, and you can save them 1 minute each, and it only takes you a few minutes to do, why wouldn't you do it?

Users of our data products deserve to be able to do the most with the fewest resources. Let's have some audience participation. Stretch your body or react if you can answer "yes" to the following questions.

1.  Have you created a URL action before?
2.  Do your users describe a problem with a dashboard without telling you which dashboard?
3.  Do you sometimes allow users to drill down into less-aggregated data?
4.  If a user wants to find out more information about the records they find, do they have to open the source system and type in some arcane code to find the detailed records? (Why would you do that to people?)
5.  Do you know what kinds of URL schemes your source systems (like student information systems or customer relation managers) support? (If you are like most working in analytics or institutional research, the answer is probably no. You might be lucky if you even have access to the source systems.)

Resources: [imgflip generator](https://imgflip.com/i/82rw5v)
:::

## *inform*ating

::: callout-note
[*Informating*](https://en.wikipedia.org/wiki/Informating) is a term coined by Shoshana Zuboff in the book *In the Age of the Smart Machine* (1988). You can think of it as "turning something into useable information."
:::

::: {style="font-size: 60%;"}
| Broke | Bespoke |
|-------|---------|
| Displaying an employee ID | Linking to their detail page in your HR system |
| Displaying weird records on a data quality dashboard | Linking to where users can fix them |
| Displaying a course a student has taken | Linking to the course catalog or a dashboard where you can see how others have fared |
:::

::: notes
In your own job, when something is taking too long, you can often automate that process. When you can automate the access to information for others, then you are *informating*. Information has a meaning, and by creating links, you are endowing the information with a context that others can use to find out more.
:::

## creating a URL action

::: {layout-ncol="2"}
![Click menu Dashboard \> Actions...](images/google-forms_tableau-dashboard-actions.png){fig-alt="Click on Dashboard and then Actions"}

![Then click the Add Action button and select "Go to URL..."](images/tableau_add-action.png){fig-alt="Click Add Action, then 'Go to URL...'"}
:::

::: notes
Actions permit information to flow between UI elements. The "Go to URL..." actions are a little different in that they allow interaction with a website outside of Tableau. Think of them as a primitive precursor to extensions.
:::

## creating a URL action

1.  **Give the URL Action a good name**, since it will be the link text when you use Run action on Menu.
2.  **The URL is the most important part.** Start simple and build complexity iteratively!

![](images/tableau_add-url-action.png){fig-alt="Add URL Action dialog"}

::: notes
The rest of the presentation will be about what you can do with the URL.
:::

# case study üîÅ: feedback via Google Forms

::: notes
For our first case study, we look at how to speed up the feedback loop of getting comments on a dashboard. Users may be daunted by having to fully review a dashboard before responding. What if they can shoot off a quick comment every time they think of something to improve? Let's make it as easy as possible for them.
:::

## üîÅresults

::: {layout="[[20, 80]]"}
[test dashboard](https://public.tableau.com/app/profile/brian.vancil/viz/WorldIndicators-FeedbackTest/A) {{< qrcode https://public.tableau.com/app/profile/brian.vancil/viz/WorldIndicators-FeedbackTest/A qrft >}}

![](images/google-forms_dashboard.png){fig-alt="Dashboard with a link to 'Give feedback'"}
:::

::: notes
We have created a very simple dashboard based on the World Indicators sample workbook. It's not fancy, but please give it a try.
:::

## üîÅ functionality

![](images/google-forms_dashboard-feedback.png){fig-alt="Tableau pop-up window showing URL action"}

![](images/google-forms_feedback-form.png){fig-alt="Pre-filled information on feedback form"}

::: notes
You can click on the "Give feedback" link to open a Google Form to write your feedback. Amost everything is pre-filled so that I know with whom to follow up. If we were running this on Tableau Server instead of Tableau Public, we could pre-fill your actual name and username.
:::

## üîÅ how it works in Google Forms

[![Click on "‚Åù" \> "Get pre-filled link"](images/google-forms_prefilled.png)](https://docs.google.com/forms/d/1o1hA2CA0khPzK5q67INkGGceSzFtRzJPIwq3m56C_Ds/edit)

::: notes
To accomplish this simple pleasure, we use the "Get pre-filled link" option in Google Forms.

When you do this, you can type nonsense into each field that you want pre-filled, but I recommend that you type different nonsense because, as you'll see in a moment, you won't be able to distinguish the variables based on their names.
:::

## üîÅ how it works in Google Forms

When you click "Get link" and then "COPY LINK", you'll get something like (where I have added spaces and line breaks for readability):
<br/>

`https://docs.google.com/forms/d/e/1FAIpQLSdm28hTNGWKTXT` `5vk1Wmk3c_BuDvsmnShylr6FLGGx0vaQdyw/viewform` `?usp=pp_url` `&entry.1727620612=`[**First+Name**]{style="color: red;"} `&entry.838417280=`[**Last+Name**]{style="color: red;"} `&entry.908520332=`[**\_\_other_option\_\_**]{style="color: red;"} `&entry.908520332.other_option_response=`[**other+dashboard**]{style="color: red;"}

::: notes
As promised, here's the ugly URL. I've highlighted in red the parts of the URL that change based on what I enter. The real magic is that Tableau can construct the URL dynamically from Tableau Server and data variables.

(If I were doing this again, I would just stick to free text fields rather than trying to use lists so that you don't have to continually change the elements in the list or do this weird "other option" option.)
:::

## üîÅ GET-style URLs

::: {style="font-size: 65%;"}
| meaning               | URL part                                    |
|-----------------------|---------------------------------------------|
| protocol              | `https://`                                  |
| server name           | `docs.google.com`                           |
| path                  | `/forms/d/e/.../viewform`                   |
| start of GET query    | `?`                                         |
| key=URL-encoded value | `usp=pp_url`                                |
| separator             | `&`                                         |
| key=URL-encoded value | `entry.908520332=`[Retention+%26+progression]{style="color: red; font-weight: bold;"} |
| separator             | `&`                                         |
| key=URL-encoded value | `entry.1727620612=`[\<Username\>]{style="color: red; font-weight: bold;"}               |
| separator             | `&`                                         |
| key=URL-encoded value | `entry.838417280=`[\<Full name\>]{style="color: red; font-weight: bold;"}               |

URL broken up into multiple pieces. These should all be on one line.

References: [permadi.com introduction to URL encoding](https://www.permadi.com/tutorial/urlEncoding/)
:::

::: notes
Here I've broken the GET-style URL into parts and replaced the red parts with Tableau variables I'd like to insert between angle brackets. I've hard coded the dashboard variable for a hypothetical Retention ampersand progression dashboard. Note that the variable values are URL-encoded, meaning that spaces are replaced with plus signs, and special characters are replaced with a percent sign followed by an ASCII hexadecimal codes. You don't have to remember all the codes because Tableau can handle the URL encoding for you.
:::

## üîÅ how it works in Tableau

![](images/google-forms_tableau-dashboard-actions-list.png){fig-alt="List of two dashboard actions, Give feedback on dashboard A and Give feedback on dashboard B. Both are Menu actions that use Username and Full name."}

::: notes
Here are our dashboard actions for the sample dashboard.
:::

## üîÅ what to prepopulate

![](images/google-forms_tableau-calc_username.png){fig-alt="The calculation Username is just the string My Tableau Server User Name in upper camel case"}

![](images/google-forms_tableau-calc_fullname.png){fig-alt="The calculation Full name is just the string My Full Name"}

::: notes
Tableau Public restricts us from exfiltrating user information using the `USERNAME()` or `FULLNAME()` functions, but of course, you are free to do this on your own Tableau Server instance. This saves users having to enter their information each time they fill out the form.

You'll also want to pre-populate the dashboard name. You can create variables or parameters to do this, but I would just do that directly on the URL as you specify the URL action.
:::

## üîÅ create a feedback sheet

![](images/google-forms_tableau_feedback-sheet.png){fig-alt="Create a sheet with Username and Full name on details. You can also create a tooltip Privacy Notice"} ![](images/google-forms_tableau_feedback-sheet-tooltip.png){fig-alt="Privacy Notice tooltip stating that we will pass the following values to Google Forms"}

::: notes
I recommend creating a separate feedback sheet so that you can style the text to look like a link and add any special tooltip you want. I added a Privacy Notice to let users know that you will be using their username and full name. Notice that the variables I want to use in the URL are pills on detail.
:::

## üîÅ edit the action

![](images/google-forms_tableau_edit-url-action.png){fig-alt="Edit URL action to add a menu action using a given URL."}

::: notes
Users will see the Name of the action if you use the Menu option, so make it descriptive. The insert menu is used to enter your chosen variables, which you should put on detail.

The Data Values menu gives you the option to URL-encode variables, which is a good idea. There's even an option to pass multiple values if the system you are targetting supports that.
:::

# case study: üå°Ô∏è Data quality via Qualtrics

::: notes
Feedback on dashboards is nice, but what if you want users to be able to report instances of bad data so that you can route it to someone who can fix them?
:::

## üå°Ô∏è results

::: {layout="[[20, 80]]"}
[test dashboard](https://public.tableau.com/app/profile/brian.vancil/viz/data-quality-test/Dashboard) {{< qrcode https://public.tableau.com/app/profile/brian.vancil/viz/data-quality-test/Dashboard qrdq >}}

![](images/qualtrics_dashboard-feedback.png){fig-alt="Dashboard with a link to 'Give feedback about this data point'"}
:::

::: notes
We have created a very simple dashboard with a few weird values. I encourage you to give it a try to comment on any data points you see as unfit. In the picture I have used Tableau to highlight these highly negative values for comment.
:::

## üå°Ô∏è functionality

![](images/qualtrics_prefilled.png){fig-alt="Pre-filled form"}

::: notes
Again, the form pre-fills. Because this is Qualtrics, you have more options about where to route the email, perhaps based on the data domain. Note that I have only pre-filled the ID so that I'm not passing around too much FERPA-covered information.
:::

## üå°Ô∏è add parameters to a survey

![Click on the "Survey flow" button.](images/qualtrics_flow.png){fig-alt="Click on the Survey flow button"}

References: Qualtrics. "[Passing information via query strings](https://www.qualtrics.com/support/survey-platform/survey-module/survey-flow/standard-elements/passing-information-through-query-strings/)".

::: notes
You'll need to click on the "Survey flow" button to create a flow that can interpret the URL parameters before the survey gets filled out. Qualtrics is so flexible that it's easy for you to be sneaky and hide some of those pre-filled fields so that people don't know how much information they are revealing, but I trust in your professional ethics.
:::

## üå°Ô∏è  survey flow

![Set Embedded Data variables from the URL](images/qualtrics_survey-flow.png){fig-alt="Survey flow that sets id, user, and name from the URL"}

::: notes
Here's the survey flow as completed with `id`, `user`, and `name`. You may create your own variable names in Qualtrics, which can be different from the IDs of the survey elements.
:::

## üå°Ô∏è use embedded data variables

![Use Embedded Data variable in default value with the syntax `${e://Field/`*fieldname*`}`](images/qualtrics_survey-field.png){fig-alt="Set an individual field"}

::: notes
After the survey flow has run, Qualtrics makes those variables available as embedded data fields within the survey, but you can also use them explicitly to give default values for your form fields.
:::

## üå°Ô∏è conclusions

![Feedback dot approach](images/qualtrics_tableau-feedback-dot.png){fig-alt="Clicking on feedback dot brings up link."}

::: notes
After this, the work in Tableau is nearly identical to the Google Forms case.

I used an explicit feedback dot to call attention to this functionality, but users would need to be told that they needed to click anyway, so perhaps an i-button or something familiar may be better.
:::

# case study: üîç deep-linking into Slate

::: notes
Users often want to drill down into data. Tableau can do some of this, but at some point, users want the source systems, especially when they want to modify errant data.

In our work, we rarely have access to source systems, let alone design them. However, the types of URLs that these source applications support matter greatly to the user experience we are able to give. We would like to be able to deep link (link to a specific detail page) as opposed to a shallow link to a home page.

I encourage you to be more involved in asking the hard questions when these systems are purchased.
:::

## üîç warning! 

üößüèóüë∑‚Äç‚ôÄÔ∏èüë∑‚Äç‚ôÇÔ∏èüèóüöß This section is a work-in-progress.

::: notes
You will soon see that my attempt to link from Tableau to an individual record in Slate was not successful. I hope that someone with more knowledge of Slate can build on this approach and share back with us.
:::

## üîç creating Slate URLs

`/manage/report/render?id=`*reportUUID*`&`*parameter1Id*`=`*parameter1Value*`&`...

::: notes
Slate report URLs end with the following.  I have left off the protocol and server name because the server name will depend on your Slate instance. As with previous URLs, we can add key-equals-value pairs to pass information to Slate.

A [UUID/GUID](https://www.uuidgenerator.net/version4) is what Slate uses internally to refer to certain data elements as well as queries and reports.
::: 

## üîç add parameter to report

To define a parameter called `StudentID`, use an XML fragment like `<param id="StudentID" />`

![Click "Edit Report" and then "Edit" to bring up the "Edit Report" dialog](images/slate_edit-report_param.png){fig-alt="Edit Report dialog box"}

## üîç add a report part

![](images/slate_edit-data-table.png){fig-alt="Edit Part dialog box with Data Table as Type"}

::: notes
I suggest using a "Data Explorer" or "Data/Charts" part. The "Query" part didn't work for me.

I suspect that the Query report part may be necessary to get the Slate functionality to link to a student or application detail page.
::: 

## üîç use parameter in a filter

`@`*variablename*

![](images/slate_edit-data-table_adding-filter.png)

::: notes
You use the syntax at-sign and then the variable name to refer to a variable. Used in a filter, it affects the results.
::: 

## üîç all filled out

![](images/slate_edit-data-table_filled-out.png)

::: notes
Here I've filltered the GUID to match my StudentID parameter. You wouldn't actually want to use GUID unless your reporting database exports that field, of course, and you have it available in Tableau.
::: 

## üîç it works?

::: {.callout-important}
**Error**: Must declare the scalar variable "@StudentID".
:::

::: notes
It works for Data Explorer and Data/Charts, but I couldn't make it work for the Query report part.

...I'm open to hearing from someone more familiar with Slate about how to solve this problem.
:::

# conclusion

## caveats and tips

-   Be sure that you are exporting FERPA-covered data elements to *encrypted* web services (i.e., those with `https://` URLs).
-   If you do not see the URL action, it may be that:

    -   Check that you included the variable pills on detail.
    -   Check that the URL scheme is valid. Start with a simple URL and grow it iteratively.
    -   Did you turn on URL encoding? Use care, as it encodes *all* parameters and variables in the URL, so don't use a variable for the base URL!

::: notes
GET-style URLs are a surprisingly powerful way to pass information from one system to another, so get informating!
:::

## more information

### resources
[github.com/bvancil/tableau-url-actions](https://github.com/bvancil/tableau-url-actions) {{< qrcode https://github.com/bvancil/tableau-url-actions qrgh >}}
<br/>

### presentation
<https://bvancil.github.io/tableau-url-actions/> (Use the `s` key to show all the speaker notes.) {{< qrcode https://bvancil.github.io/tableau-url-actions/ qrpr >}}

::: notes
Thank you for humoring my speedy trip through this tip! I welcome follow-up conversation and questions.
:::
